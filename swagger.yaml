# NEED TO ADD EXAMPLES
swagger: "2.0"
info:
  version: "1.0"
  title: "hackerino"
  description: API that manages students, teachers, exams, reviews...
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: hackerino.herokuapp.com
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /exams:
    get:
      description: Returns exams list.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /exams
      responses:
        "200":
          description: An exams list.
          schema:
            type: object
            properties:
              tot_exams:
                description: Total number of exams
                type: integer
                minimum: 0
              exams:
                type: array
                items:
                  $ref: "#/definitions/Exam"
            required:
              - tot_exams
              - exams
        "400":
          description: Bad request.
    post:
      description: Adds an exam.
      parameters:
        - in: body
          name: exam
          schema:
            type: object
            required:
              - date
              - deadline
              - review_deadline
            properties:
              date:
                type: string
                minLength: 1
                format: date-time
              deadline:
                type: string
                minLength: 1
                format: date-time
              review_deadline:
                type: string
                minLength: 1
                format: date-time
      tags:
        - /exams
      responses:
        "201":
          description: Exam created.
          schema:
            $ref: "#/definitions/Exam"
        "400":
          description: Bad request.
        "424":
          description: One of the foreign keys can't be resolved.

  /exams/{examID}:
    parameters:
      - $ref: "#/parameters/examID"
    get:
      description: Returns an exam by examID.
      tags:
        - /exams
      responses:
        "200":
          description: An exam.
          schema:
            $ref: "#/definitions/Exam"
        "404":
          description: An exam with the specified examID was not found.
    put:
      description: Updates/creates an exam by examID.
      parameters:
        - in: body
          name: exam
          schema:
            type: object
            required:
              - date
              - deadline
              - review_deadline
            properties:
              date:
                type: string
                minLength: 1
                format: date-time
              deadline:
                type: string
                minLength: 1
                format: date-time
              review_deadline:
                type: string
                minLength: 1
                format: date-time
      tags:
        - /exams
      responses:
        "200":
          description: Exam updated.
        "201":
          description: Exam created.
        "400":
          description: Bad request.
        "424":
          description: One of the foreign keys can't be resolved.
    delete:
      description: Deletes an exam by examID.
      tags:
        - /exams
      responses:
        "204":
          description: Exam deleted.
        "404":
          description: Could not delete exam with the specified examID (exam not found).

  /exams/{examID}/students:
    parameters:
      - $ref: "#/parameters/examID"
    get:
      description: Returns the students taking the exam.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /exams
      responses:
        "200":
          description: A list of students taking an exam.
          schema:
            type: object
            properties:
              tot_students:
                description: Total number of students taking an exam
                type: integer
                minimum: 0
              students:
                type: array
                items:
                  $ref: "#/definitions/Student"
            required:
              - tot_students
              - students
        "400":
          description: Bad request.
        "404":
          description: Exam not found.
    post:
      description: Sign up a student for an exam.
      parameters:
        - in: body
          name: student
          schema:
            type: object
            required:
              - studentID
            properties:
              studentID:
                type: integer
                minimum: 1
      tags:
        - /exams
      responses:
        "204":
          description: Student added to exam.
        "400":
          description: Bad request.
        "404":
          description: Exam not found.
        "423":
          description: Student already signed up.
        "424":
          description: One of the foreign keys can't be resolved.

  /exams/{examID}/teachers:
    parameters:
      - $ref: "#/parameters/examID"
    get:
      description: Returns the teachers assigned to the exam.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /exams
      responses:
        "200":
          description: A list of teachers assigned to an exam
          schema:
            type: object
            properties:
              tot_teachers:
                description: Total number of teachers assigned to an exam
                type: integer
                minimum: 0
              teachers:
                type: array
                items:
                  $ref: "#/definitions/Teacher"
            required:
              - tot_teachers
              - teachers
        "400":
          description: Bad request.
        "404":
          description: Exam not found.
    post:
      description: Add a teacher to an exam.
      parameters:
        - in: body
          name: teacher
          schema:
            type: object
            required:
              - teacherID
            properties:
              teacherID:
                type: integer
                minimum: 1
      tags:
        - /exams
      responses:
        "204":
          description: Teacher added to exam.
        "400":
          description: Bad request.
        "404":
          description: Exam not found.
        "423":
          description: Teacher already added.
        "424":
          description: One of the foreign keys can't be resolved.

  /exams/{examID}/tasks:
    parameters:
      - $ref: "#/parameters/examID"
    get:
      description: Returns the list of tasks used in this exam.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /exams
      responses:
        "200":
          description: A list of tasks used in an exam
          schema:
            type: object
            properties:
              tot_tasks:
                description: Total number of tasks used in an exam
                type: integer
                minimum: 0
              tasks:
                type: array
                items:
                  $ref: "#/definitions/Task"
            required:
              - tot_tasks
              - tasks
        "400":
          description: Bad request.
        "404":
          description: Exam not found.
    post:
      description: Add a task to the exam.
      parameters:
        - in: body
          name: task
          schema:
            type: object
            required:
              - taskID
            properties:
              taskID:
                type: integer
                minimum: 1
      tags:
        - /exams
      responses:
        "204":
          description: Task added to exam.
        "400":
          description: Bad request.
        "404":
          description: Exam not found.
        "423":
          description: Task already added.
        "424":
          description: One of the foreign keys can't be resolved.

  /exams/{examID}/submissions:
    parameters:
      - $ref: "#/parameters/examID"
    get:
      description: Returns the list of submissions regarding tasks used in this exam.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /exams
      responses:
        "200":
          description: A list of submissions regarding tasks used in an exam
          schema:
            type: object
            properties:
              tot_submissions:
                description: Total number of submissions regarding tasks used in an exam
                type: integer
                minimum: 0
              submissions:
                type: array
                items:
                  $ref: "#/definitions/Submission"
            required:
              - tot_submissions
              - submissions
        "400":
          description: Bad request.
        "404":
          description: Exam not found.

  /reviews:
    get:
      description: Returns reviews.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /reviews
      responses:
        "200":
          description: A reviews list.
          schema:
            type: object
            properties:
              tot_reviews:
                description: Total number of reviews
                type: integer
                minimum: 0
              reviews:
                type: array
                items:
                  $ref: "#/definitions/Review"
            required:
              - tot_reviews
              - reviews
        "400":
          description: Bad request.
    post:
      description: Adds a review.
      parameters:
        - in: body
          name: review
          schema:
            type: object
            required:
              - studentID
              - submissionID
              - mark
            properties:
              studentID:
                type: integer
                minimum: 1
              submissionID:
                type: integer
                minimum: 1
              mark:
                type: integer
                minimum: 0
                maximum: 30
      tags:
        - /reviews
      responses:
        "201":
          description: Review submitted.
          schema:
            $ref: "#/definitions/Review"
        "400":
          description: Bad request.
        "423":
          description: This student has already reviewed that submission.
        "424":
          description: One of the foreign keys can't be resolved.
        "451":
          description: "Cannot submit the review right now: too early ( < exam/deadline ) or too late ( >= exam/review_deadline)."

  /reviews/{reviewID}:
    parameters:
      - $ref: "#/parameters/reviewID"
    get:
      description: Returns a review by reviewID.
      tags:
        - /reviews
      responses:
        "200":
          description: A review.
          schema:
            $ref: "#/definitions/Exam"
        "404":
          description: A review with the specified reviewID was not found.
    put:
      description: Updates/creates a submission review of an exam by reviewID.
      parameters:
        - in: body
          name: review
          schema:
            type: object
            required:
              - studentID
              - submissionID
              - mark
            properties:
              studentID:
                description: This parameter will be IGNORED if doing a put-update because it is part of a unique key constraint.
                type: integer
                minimum: 1
              submissionID:
                description: This parameter will be IGNORED if doing a put-update because it is part of a unique key constraint.
                type: integer
                minimum: 1
              mark:
                type: integer
                minimum: 0
                maximum: 30
      tags:
        - /reviews
      responses:
        "200":
          description: Review updated.
        "201":
          description: Review created.
        "400":
          description: Bad request.
        "423":
          description: This student has already reviewed that submission.
        "424":
          description: One of the foreign keys can't be resolved.
    delete:
      description: Deletes a submission review from an exam by reviewID.
      tags:
        - /reviews
      responses:
        "204":
          description: Review deleted.
        "404":
          description: Could not delete review with the specified reviewID (review not found).

  /submissions:
    get:
      description: Returns submissions list
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
        - in: query
          name: examID
          type: integer
          minimum: 1
        - in: query
          name: taskID
          type: integer
          minimum: 1
        - in: query
          name: studentID
          type: integer
          minimum: 1
      tags:
        - /submissions
      responses:
        "200":
          description: A submissions list of an exam.
          schema:
            type: object
            properties:
              tot_submissions:
                description: Total number of submissions
                type: integer
                minimum: 0
              submissions:
                type: array
                items:
                  $ref: "#/definitions/Submission"
            required:
              - tot_subimssions
              - submissions
        "400":
          description: Bad request.
    post:
      description: Adds a submission.
      parameters:
        - in: body
          name: submission
          schema:
            type: object
            required:
              - studentID
              - taskID
              - examID
            properties:
              studentID:
                type: integer
                minimum: 1
              taskID:
                type: integer
                minimum: 1
              examID:
                type: integer
                minimum: 1
              answer:
                description: EITHER (NOT BOTH) THIS OR CHOSEN_ANSWERS MUST BE PRESENT. Written answer to an open question.
                type: string
                minLength: 1
              chosen_answers:
                description: EITHER (NOT BOTH) THIS OR ANSWER MUST BE PRESENT. Indexes of chosen answers from a mult-choice question.
                type: array
                minItems: 0
                items:
                  type: integer
                  minimum: 0
      tags:
        - /submissions
      responses:
        "201":
          description: Submission added to the exam.
          schema:
            $ref: "#/definitions/Submission"
        "400":
          description: Bad request.
        "423":
          description: This student has already submitted this task during this exam. If you want to update it, use PUT /submissions/submissionID instead.
        "424":
          description: One of the foreign keys can't be resolved.
        "451":
          description: "Cannot submit the submission right now: too early ( < exam/date ) or too late ( >= exam/deadline)."

  /submissions/{submissionID}:
    parameters:
      - $ref: "#/parameters/submissionID"
    get:
      description: Returns a submission by examID and submissionID.
      tags:
        - /submissions
      responses:
        "200":
          description: A submission of an exam.
          schema:
            $ref: "#/definitions/Submission"
        "404":
          description: A submission with the specified submissionID was not found.
    put:
      description: Updates/creates a submission of an exam by submissionID.
      parameters:
        - in: body
          name: submission
          schema:
            type: object
            required:
              - studentID
              - taskID
              - examID
            properties:
              studentID:
                description: This parameter will be IGNORED if doing a put-update because it is part of a unique key constraint.
                type: integer
                minimum: 1
              taskID:
                description: This parameter will be IGNORED if doing a put-update because it is part of a unique key constraint.
                type: integer
                minimum: 1
              examID:
                description: This parameter will be IGNORED if doing a put-update because it is part of a unique key constraint.
                type: integer
                minimum: 1
              answer:
                description: EITHER (NOT BOTH) THIS OR CHOSEN_ANSWERS MUST BE PRESENT. Written answer to an open question.
                type: string
                minLength: 1
              chosen_answers:
                description: EITHER (NOT BOTH) THIS OR ANSWER MUST BE PRESENT. Indexes of chosen answers from a mult-choice question.
                type: array
                minItems: 0
                items:
                  type: integer
                  minimum: 0
      tags:
        - /submissions
      responses:
        "200":
          description: Submission updated.
        "201":
          description: Submission added to the exam.
        "400":
          description: Bad request.
        "423":
          description: The ID was not resolved => tried to create a new submission. Another submission with the same student, exam and task already exists.
        "424":
          description: One of the foreign keys can't be resolved.
    delete:
      description: Deletes a submission from an exam by ID.
      tags:
        - /submissions
      responses:
        "204":
          description: Submission removed.
        "404":
          description: Could not remove the submission with the specified submissionID (submission not found).

  /submissions/{submissionID}/reviews:
    parameters:
      - $ref: "#/parameters/submissionID"
    get:
      description: Returns a list of reviews of a given submission.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /submissions
      responses:
        "200":
          description: A list of reviews done for a given submission.
          schema:
            type: object
            properties:
              tot_reviews:
                description: Total number of reviews for a given submission
                type: integer
                minimum: 0
              reviews:
                type: array
                items:
                  $ref: "#/definitions/Review"
            required:
              - tot_reviews
              - reviews
        "404":
          description: Submission not found.

  /teachers:
    get:
      description: Returns a teachers list.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
        - $ref: "#/parameters/email"
      tags:
        - /teachers
      responses:
        "200":
          description: A teacher list.
          schema:
            type: object
            properties:
              tot_teachers:
                description: Total number of teachers
                type: integer
                minimum: 0
              teachers:
                type: array
                items:
                  $ref: "#/definitions/Teacher"
            required:
              - tot_teachers
              - teachers
        "400":
          description: Bad request.
    post:
      description: Adds a teacher.
      parameters:
        - in: body
          name: teacher
          schema:
            type: object
            required:
              - email
              - firstname
              - lastname
            properties:
              email:
                type: string
                minLength: 1
                format: email
              firstname:
                type: string
                minLength: 1
              lastname:
                type: string
                minLength: 1
      tags:
        - /teachers
      responses:
        "201":
          description: teacher created.
          schema:
            $ref: "#/definitions/Teacher"
        "400":
          description: Bad request.
        "423":
          description: A teacher with such email already exists.

  /teachers/{teacherID}:
    parameters:
      - $ref: "#/parameters/teacherID"
    get:
      description: Returns a teacher by teacherID.
      tags:
        - /teachers
      responses:
        "200":
          description: A teacher.
          schema:
            $ref: "#/definitions/Exam"
        "404":
          description: A teacher with the specified teacherID was not found.
    put:
      description: Updates/creates a teacher by teacherID.
      parameters:
        - in: body
          name: teacher
          schema:
            type: object
            required:
              - email
              - firstname
              - lastname
            properties:
              email:
                description: This parameter will be IGNORED if doing a put-update because it is part of a unique key constraint.
                type: string
                minLength: 1
                format: email
              firstname:
                type: string
                minLength: 1
              lastname:
                type: string
                minLength: 1
      tags:
        - /teachers
      responses:
        "200":
          description: teacher updated.
        "201":
          description: teacher created.
        "400":
          description: Bad request.
        "423":
          description: A teacher with such email already exists.
    delete:
      description: Removes a teacher by teacherID.
      tags:
        - /teachers
      responses:
        "204":
          description: teacher removed.
        "404":
          description: Could not remove the teacher with the specified teacherID (teacher not found).

  /teachers/{teacherID}/exams:
    parameters:
      - $ref: "#/parameters/teacherID"
    get:
      description: Returns the exams a teacher was assigned to.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /teachers
      responses:
        "200":
          description: A list of exams a teacher was assigned to.
          schema:
            type: object
            properties:
              tot_exams:
                description: Total number of exams a teacher was assigned to
                type: integer
                minimum: 0
              exams:
                type: array
                items:
                  $ref: "#/definitions/Exam"
            required:
              - tot_exams
              - exams
        "404":
          description: A teacher with the specified teacherID was not found.

  /students:
    get:
      description: Returns students list.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
        - $ref: "#/parameters/email"
      tags:
        - /students
      responses:
        "200":
          description: A students list.
          schema:
            type: object
            properties:
              tot_students:
                description: Total number of students
                type: integer
                minimum: 0
              students:
                type: array
                items:
                  $ref: "#/definitions/Student"
            required:
              - tot_students
              - students
        "400":
          description: Bad request.
    post:
      description: Adds a student.
      parameters:
        - in: body
          name: student
          schema:
            type: object
            required:
              - email
              - firstname
              - lastname
            properties:
              email:
                type: string
                minLength: 1
                format: email
              firstname:
                type: string
                minLength: 1
              lastname:
                type: string
                minLength: 1
      tags:
        - /students
      responses:
        "201":
          description: Student created.
          schema:
            $ref: "#/definitions/Student"
        "423":
          description: A student with such email already exists.
        "400":
          description: Bad request.

  /students/{studentID}:
    parameters:
      - $ref: "#/parameters/studentID"
    get:
      description: Returns a student by id.
      tags:
        - /students
      responses:
        "200":
          description: A student.
          schema:
            $ref: "#/definitions/Student"
        "404":
          description: A student with the specified studentID was not found.
    put:
      description: Updates/creates a student by studentID.
      parameters:
        - in: body
          name: student
          schema:
            type: object
            required:
              - email
              - firstname
              - lastname
            properties:
              email:
                description: This parameter will be IGNORED if doing a put-update because it is part of a unique key constraint.
                type: string
                minLength: 1
                format: email
              firstname:
                type: string
                minLength: 1
              lastname:
                type: string
                minLength: 1
      tags:
        - /students
      responses:
        "200":
          description: Student updated.
        "201":
          description: Student created.
        "400":
          description: Bad request.
        "423":
          description: A student with such email already exists.
    delete:
      description: Removes a student by studentID.
      tags:
        - /students
      responses:
        "204":
          description: Student removed.
        "404":
          description: Could not remove the student with the specified ID (student not found).

  /students/{studentID}/exams:
    parameters:
      - $ref: "#/parameters/studentID"
    get:
      description: Returns the exams a student signed up for.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /students
      responses:
        "200":
          description: A list of exams a student signed up for.
          schema:
            type: object
            properties:
              tot_exams:
                description: Total number of exams a student signed up for
                type: integer
                minimum: 0
              exams:
                type: array
                items:
                  $ref: "#/definitions/Exam"
            required:
              - tot_exams
              - exams
        "400":
          description: Bad request.
        "404":
          description: A student with the specified studentID was not found.

  /students/{studentID}/submissions:
    parameters:
      - $ref: "#/parameters/studentID"
    get:
      description: Returns the submissions a student has sent.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /students
      responses:
        "200":
          description: A list of submissions a student has sent.
          schema:
            type: object
            properties:
              tot_submissions:
                description: Total number of submissions a student has sent
                type: integer
                minimum: 0
              submissions:
                type: array
                items:
                  $ref: "#/definitions/Submission"
            required:
              - tot_submissions
              - submissions
        "400":
          description: Bad request.
        "404":
          description: A student with the specified studentID was not found.

  /students/{studentID}/reviews:
    parameters:
      - $ref: "#/parameters/studentID"
    get:
      description: Returns the reviews a student has sent.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /students
      responses:
        "200":
          description: A list of reviews.
          schema:
            type: object
            properties:
              tot_reviews:
                description: Total number of reviews a student has sent
                type: integer
                minimum: 0
              reviews:
                type: array
                items:
                  $ref: "#/definitions/Review"
            required:
              - tot_reviews
              - reviews
        "400":
          description: Bad request.
        "404":
          description: A student with the specified studentID was not found.

  /tasks:
    get:
      description: Returns a tasks list.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /tasks
      responses:
        "200":
          description: A tasks list.
          schema:
            type: object
            properties:
              tot_tasks:
                description: Total number of tasks
                type: integer
                minimum: 0
              tasks:
                type: array
                items:
                  $ref: "#/definitions/Task"
            required:
              - tot_tasks
              - tasks
        "400":
          description: Bad request.
    post:
      description: Adds a task.
      parameters:
        - in: body
          name: task
          schema:
            type: object
            required:
              - question
            properties:
              question:
                type: string
                minLength: 1
              answers:
                description: Multiple-choice questions have possible and correct answers.
                type: object
                properties:
                  possible_answers:
                    description: List of all answers the student can choose from
                    type: array
                    items:
                      type: string
                      minLength: 1
                      minItems: 2
                  correct_answers:
                    description: Indexes of correct answers from the possible_answers array.
                    type: array
                    items:
                      type: integer
                      minimum: 0
                      minItems: 1
                required:
                  - possible_answers
                  - correct_answers
      tags:
        - /tasks
      responses:
        "201":
          description: Task created.
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: Bad request.

  /tasks/{taskID}:
    parameters:
      - $ref: "#/parameters/taskID"
    get:
      description: Returns a task by taskID.
      tags:
        - /tasks
      responses:
        "200":
          description: A task.
          schema:
            $ref: "#/definitions/Task"
        "404":
          description: A task with the specified taskID was not found.
    put:
      description: Updates/creates a task by taskID.
      parameters:
        - in: body
          name: task
          schema:
            type: object
            required:
              - question
            properties:
              question:
                description: This parameter will be IGNORED if doing a put-update because it is part of a unique key constraint.
                type: string
                minLength: 1
              answers:
                description: Multiple-choice questions have possible and correct answers.
                type: object
                properties:
                  possible_answers:
                    description: List of all answers the student can choose from
                    type: array
                    items:
                      type: string
                      minLength: 1
                      minItems: 2
                  correct_answers:
                    description: Indexes of correct answers from the possible_answers array.
                    type: array
                    items:
                      type: integer
                      minimum: 0
                      minItems: 1
                required:
                  - possible_answers
                  - correct_answers
      tags:
        - /tasks
      responses:
        "200":
          description: Task updated.
        "201":
          description: Task created.
        "400":
          description: Bad request.
    delete:
      description: Removes a task by taskID.
      tags:
        - /tasks
      responses:
        "204":
          description: Task removed.
        "404":
          description: Could not remove the task with the specified taskID (task not found).

  /tasks/{taskID}/exams:
    parameters:
      - $ref: "#/parameters/taskID"
    get:
      description: Returns the exams where this task is used.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /tasks
      responses:
        "200":
          description: A list of exams.
          schema:
            type: object
            properties:
              tot_exams:
                description: Total number of exams
                type: integer
                minimum: 0
              exams:
                type: array
                items:
                  $ref: "#/definitions/Exam"
            required:
              - tot_exams
              - exams
        "400":
          description: Bad request.
        "404":
          description: A task with the specified taskID was not found.

  /tasks/{taskID}/submissions:
    parameters:
      - $ref: "#/parameters/taskID"
    get:
      description: Returns the list of submission to this task.
      parameters:
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/offset"
      tags:
        - /tasks
      responses:
        "200":
          description: A list of submission to this task.
          schema:
            type: object
            properties:
              tot_submissions:
                description: Total number of submissions sent regarding a given task
                type: integer
                minimum: 0
              submissions:
                type: array
                items:
                  $ref: "#/definitions/Submission"
            required:
              - tot_submissions
              - submissions
        "400":
          description: Bad request.
        "404":
          description: A task with the specified taskID was not found.

  /tasks/{taskID}/vote:
    parameters:
      - $ref: "#/parameters/taskID"
    post:
      description: Send a review vote for a given task.
      parameters:
        - in: body
          name: vote
          required: true
          schema:
            type: object
            properties:
              vote:
                type: integer
                minimum: 0
                maximum: 10
            required:
              - vote
      tags:
        - /tasks
      responses:
        "204":
          description: Your vote was received and the task's rating is updated.
        "400":
          description: Bad request.
        "404":
          description: A task with the specified taskID was not found.

tags:
  - name: /exams
  - name: /reviews
  - name: /submissions
  - name: /teachers
  - name: /students
  - name: /tasks

definitions:
  Exam:
    title: Exam
    description: Object containing all the information about an exam
    type: object
    properties:
      id:
        description: Uniquely identifies an exam
        type: integer
        minimum: 1
      date:
        description: Defines the starting time of the exam
        type: string
        minLength: 1
        format: date-time
      deadline:
        description: Submissions to the exam are not allowed past this time
        type: string
        minLength: 1
        format: date-time
      review_deadline:
        description: Every student must do a review for each assigned submission before this time
        type: string
        minLength: 1
        format: date-time
      n_teachers:
        description: Number of teachers monitoring the exam
        type: integer
        minimum: 0
      n_students:
        description: Number of students registered to the exam
        type: integer
        minimum: 0
      n_tasks:
        description: Number of tasks used in the exam
        type: integer
        minimum: 0
    required:
      - id
      - date
      - deadline
      - review_deadline
      - n_teachers
      - n_students
      - n_tasks

  Student:
    title: Student
    description: Object containing all the information about a student
    type: object
    properties:
      id:
        description: Student's identifier
        type: integer
        minimum: 1
      email:
        description: Student's email
        type: string
        minLength: 1
        format: email
      firstname:
        description: First name of the student
        type: string
        minLength: 1
      lastname:
        description: Last name of the student
        type: string
        minLength: 1
    required:
      - id
      - email
      - firstname
      - lastname

  Task:
    title: Task
    description: Object containing information about a task
    type: object
    properties:
      id:
        description: Task identifier
        type: integer
        minimum: 1
      question:
        description: Written question
        type: string
        minLength: 1
      answers:
        description: Multiple-choice questions have possible and correct answers.
        type: object
        properties:
          possible_answers:
            description: List of all answers the student can choose from
            type: array
            items:
              type: string
              minLength: 1
              minItems: 2
          correct_answers:
            description: Indexes of correct answers from the possible_answers array.
            type: array
            items:
              type: integer
              minimum: 0
              minItems: 1
        required:
          - possible_answers
          - correct_answers
      n_votes:
        description: Number of votes the task received from either students or teachers
        type: integer
        minimum: 0
      rating:
        description: Average vote
        type: number
        minimum: 0
        maximum: 10
    required:
      - id
      - question
      - n_votes
      - rating

  Review:
    title: Review
    description: Object containing information about a review of a student for a submission
    type: object
    properties:
      id:
        description: Review's identifier
        type: integer
        minimum: 1
      student:
        description: The student who has done the review
        type: integer
        minimum: 1
      submission:
        description: The submission of which the student has done the review
        type: integer
        minimum: 1
      mark:
        description: Mark given by the student to this submission
        type: integer
        minimum: 0
        maximum: 30
    required:
      - id
      - student
      - submission
      - mark

  Submission:
    title: Submission
    description: Object containing information about a submission
    type: object
    properties:
      id:
        description: Identifies a submission
        type: integer
        minimum: 1
      student:
        description: The student who submitted this object
        type: integer
        minimum: 1
      task:
        description: The task for which the submission was sent
        type: integer
        minimum: 1
      exam:
        description: The exam where the student submitted for a given task
        type: integer
        minimum: 1
      answer:
        description: EITHER (NOT BOTH) THIS OR CHOSEN_ANSWERS MUST BE PRESENT. Written answer to an open question.
        type: string
        minLength: 1
      chosen_answers:
        description: EITHER (NOT BOTH) THIS OR ANSWER MUST BE PRESENT. Indexes of chosen answers from a mult-choice question.
        type: array
        minItems: 0
        items:
          type: integer
          minimum: 0
      review_points:
        description: Rating given by the peer-review phase
        type: integer
        minimum: 0
        maximum: 30
      final_points:
        description: Final rating assigned to the submission
        type: integer
        minimum: 0
        maximum: 30
    required:
      - id
      - student
      - task
      - exam
      - review_points
      - final_points

  Teacher:
    title: Teacher
    description: Object containing information about a teacher
    type: object
    properties:
      id:
        description: Teacher's identifier
        type: integer
        minimum: 1
      email:
        description: Email of the teacher
        type: string
        minLength: 1
        format: email
      firstname:
        description: First name of the teacher
        type: string
        minLength: 1
      lastname:
        description: Last name of the teacher
        type: string
        minLength: 1
    required:
      - id
      - email
      - firstname
      - lastname

parameters:
  limit:
    description: Limits the number of objects returned
    in: query
    name: limit
    type: integer
    minimum: 0
  offset:
    description: The first n elements compliant to the request will not be in the response message (where offset=n)
    in: query
    name: offset
    type: integer
    minimum: 0
  email:
    description: Filters for email the list of objects requested (the objects must naturally have the email attribute)
    in: query
    name: email
    type: string
    minLength: 1
    format: email
  examID:
    description: Exam's identifier
    in: path
    name: examID
    type: integer
    minimum: 1
    required: true
  submissionID:
    description: Submission's identifier
    in: path
    name: submissionID
    type: integer
    minimum: 1
    required: true
  taskID:
    description: Identifies a task
    in: path
    name: taskID
    type: integer
    minimum: 1
    required: true
  reviewID:
    description: Identifies a review
    in: path
    name: reviewID
    type: integer
    minimum: 1
    required: true
  studentID:
    description: Identifies a student
    in: path
    name: studentID
    type: integer
    minimum: 1
    required: true
  teacherID:
    description: Identifies a teacher
    in: path
    name: teacherID
    type: integer
    minimum: 1
    required: true